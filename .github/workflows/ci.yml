name: CI

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]
  workflow_dispatch:

jobs:
  tests:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.1'
        coverage: none
        tools: composer
    
    - name: Cache Composer dependencies
      uses: actions/cache@v3
      with:
        path: vendor
        key: ${{ runner.os }}-php-${{ hashFiles('**/composer.lock') }}
        restore-keys: |
          ${{ runner.os }}-php-
    
    - name: Install dependencies
      run: composer install --prefer-dist --no-progress --no-interaction
    
    - name: Check syntax
      run: |
        find . -name "*.php" -not -path "./vendor/*" -not -path "./TCPDF-main/*" -exec php -l {} \;
    
    - name: Test PHP extensions
      run: |
        php -m | grep -i json
        php -m | grep -i session
        php -m | grep -i mbstring

  lint:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.1'
    
    - name: PHP Code Sniffer (Optional)
      run: |
        echo "Linting process completed"
        # Add PHPStan or PHPCS here if needed

  deploy:
    name: FTP Deployment
    runs-on: ubuntu-latest
    needs: tests
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Install Composer dependencies
      run: composer install --no-dev --prefer-dist --no-progress --no-interaction
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Deploy to FTP (only changed files)
      env:
        FTP_HOST: ${{ secrets.FTP_SERVER }}
        FTP_USER: ${{ secrets.FTP_USERNAME }}
        FTP_PASS: ${{ secrets.FTP_PASSWORD }}
      run: |
        python3 << 'EOF'
        import os, sys, subprocess, ftplib
        
        host = os.environ.get('FTP_HOST')
        user = os.environ.get('FTP_USER')
        password = os.environ.get('FTP_PASS')
        
        # Değişen dosyaları bul
        try:
            res = subprocess.run(['git', 'diff', '--name-only', 'HEAD^..HEAD'], capture_output=True, text=True)
            changed = [p for p in res.stdout.splitlines() if p]
        except Exception:
            changed = []
        if not changed:
            changed = ['index.php']
        
        EXCLUDES = (
            '.git/', '.github/', 'node_modules/', 'TCPDF-main/', 'vendor/composer/',
            '.gitignore', '.md', 'README.md', 'composer.lock', 'package.json'
        )
        def excluded(p: str) -> bool:
            p = p.replace('\\', '/')
            return any(x in p for x in EXCLUDES)
        files = [p for p in changed if os.path.isfile(p) and not excluded(p)]
        print('Files to upload:', files)
        if not files:
            sys.exit(0)
        
        def ensure_dirs(ftp: ftplib.FTP, remote_path: str):
            parts = remote_path.strip('/').split('/')[:-1]
            cur = ''
            for part in parts:
                cur = f"{cur}/{part}" if cur else part
                try:
                    ftp.mkd(cur)
                except Exception:
                    pass
        
        with ftplib.FTP(host, user, password, timeout=30) as ftp:
            ftp.set_pasv(True)
            print('Connected to', host)
            for local in files:
                remote = local.replace('\\', '/')
                ensure_dirs(ftp, remote)
                with open(local, 'rb') as f:
                    print('Uploading', remote)
                    ftp.storbinary(f'STOR {remote}', f)
        print('Selective FTP upload completed.')
        EOF

