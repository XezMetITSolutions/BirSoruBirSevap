name: CI

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]
  workflow_dispatch:

jobs:
  tests:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.1'
        coverage: none
        tools: composer
    
    - name: Cache Composer dependencies
      uses: actions/cache@v3
      with:
        path: vendor
        key: ${{ runner.os }}-php-${{ hashFiles('**/composer.lock') }}
        restore-keys: |
          ${{ runner.os }}-php-
    
    - name: Install dependencies
      run: composer install --prefer-dist --no-progress --no-interaction
    
    - name: Check syntax
      run: |
        find . -name "*.php" -not -path "./vendor/*" -not -path "./TCPDF-main/*" -exec php -l {} \;
    
    - name: Test PHP extensions
      run: |
        php -m | grep -i json
        php -m | grep -i session
        php -m | grep -i mbstring

  lint:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.1'
    
    - name: PHP Code Sniffer (Optional)
      run: |
        echo "Linting process completed"
        # Add PHPStan or PHPCS here if needed

  deploy:
    name: FTP Deployment
    runs-on: ubuntu-latest
    needs: tests
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Install Composer dependencies
      run: composer install --no-dev --prefer-dist --no-progress --no-interaction
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install ftputil
      run: pip install ftputil
    
    - name: Deploy to FTP with Python
      env:
        FTP_HOST: ${{ secrets.FTP_SERVER }}
        FTP_USER: ${{ secrets.FTP_USERNAME }}
        FTP_PASS: ${{ secrets.FTP_PASSWORD }}
      run: |
        python3 << 'EOF'
        import ftputil
        import os
        import sys
        
        host = os.environ.get('FTP_HOST')
        user = os.environ.get('FTP_USER')
        password = os.environ.get('FTP_PASS')
        
        try:
            with ftputil.FTPHost(host, user, password) as ftp:
                ftp.use_passive_mode = True
                print(f"Connected to {host}")
                
                # Yüklenecek dosyaları tarama
                exclude = ['.git', '.github', 'node_modules', '.md', 'composer.lock', 'package.json']
                
                def should_upload(path):
                    return not any(ex in path for ex in exclude)
                
                for root, dirs, files in os.walk('.'):
                    for file in files:
                        local_path = os.path.join(root, file)
                        if should_upload(local_path):
                            remote_path = local_path.replace('\\', '/')
                            print(f"Uploading: {remote_path}")
                            try:
                                ftp.upload(local_path, remote_path)
                            except Exception as e:
                                print(f"Skipped {remote_path}: {e}")
                
                print("FTP upload completed!")
        except Exception as e:
            print(f"FTP Error: {e}")
            sys.exit(1)
        EOF

